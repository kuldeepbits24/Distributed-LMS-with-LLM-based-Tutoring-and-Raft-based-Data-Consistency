# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import tutoring_pb2 as tutoring__pb2


class TutoringStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetLLMAnswer = channel.unary_unary(
                '/tutoring.Tutoring/GetLLMAnswer',
                request_serializer=tutoring__pb2.GetLLMAnswerRequest.SerializeToString,
                response_deserializer=tutoring__pb2.GetLLMAnswerResponse.FromString,
                )
        self.PostQuery = channel.unary_unary(
                '/tutoring.Tutoring/PostQuery',
                request_serializer=tutoring__pb2.PostQueryRequest.SerializeToString,
                response_deserializer=tutoring__pb2.PostQueryResponse.FromString,
                )


class TutoringServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetLLMAnswer(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PostQuery(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TutoringServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetLLMAnswer': grpc.unary_unary_rpc_method_handler(
                    servicer.GetLLMAnswer,
                    request_deserializer=tutoring__pb2.GetLLMAnswerRequest.FromString,
                    response_serializer=tutoring__pb2.GetLLMAnswerResponse.SerializeToString,
            ),
            'PostQuery': grpc.unary_unary_rpc_method_handler(
                    servicer.PostQuery,
                    request_deserializer=tutoring__pb2.PostQueryRequest.FromString,
                    response_serializer=tutoring__pb2.PostQueryResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'tutoring.Tutoring', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Tutoring(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetLLMAnswer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/tutoring.Tutoring/GetLLMAnswer',
            tutoring__pb2.GetLLMAnswerRequest.SerializeToString,
            tutoring__pb2.GetLLMAnswerResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PostQuery(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/tutoring.Tutoring/PostQuery',
            tutoring__pb2.PostQueryRequest.SerializeToString,
            tutoring__pb2.PostQueryResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
